use anyhow::Result;
use quote::ToTokens;
use std::path::PathBuf;
use syn::{
    File, FnArg, Ident, Item, ItemTrait, Signature, TraitItem, Type, parse_quote,
    visit_mut::VisitMut,
};

#[derive(clap::Parser)]
pub struct GenerateArgs {
    /// The path to the binding file generated by wit-bindgen.
    pub bindings: PathBuf,
    /// Specifies the type of the WIT component.
    pub mode: GenerateMode,
    /// The path to the output file.
    #[arg(short, long, default_value("lib.rs"))]
    pub output_file: PathBuf,
}
#[derive(clap::ValueEnum, clap::Parser, Clone)]
pub enum GenerateMode {
    /// An arbitrary component, we can only generate an empty stub.
    Stubs,
    /// A instrument component which imports and exports the same interface.
    /// The generated code will redirect the export interface to call the corresponding import interface.
    Instrument,
    /// A virtualized component with no imports. Currently only used for replay.
    Virtualize,
}

struct State<'a> {
    mode: GenerateMode,
    ast: &'a File,
    info: Vec<TraitInfo>,
    output: File,
}
struct TraitInfo {
    module_path: Vec<String>,
    trait_item: ItemTrait,
}

impl GenerateArgs {
    pub fn generate(&self) -> Result<()> {
        let file = std::fs::read_to_string(&self.bindings)?;
        let ast = syn::parse_file(&file)?;
        let info = find_all_traits(&ast.items, vec![]);
        let mut state = State {
            mode: self.mode.clone(),
            ast: &ast,
            info,
            output: generate_preamble(&self.mode),
        };
        state.generate_stubs();
        let output = prettyplease::unparse(&state.output);
        std::fs::write(&self.output_file, output)?;
        Ok(())
    }
}
impl<'ast> State<'ast> {
    fn generate_stubs(&mut self) {
        let mut items = Vec::new();
        for trait_info in self.info.iter() {
            let impl_with_methods = self.generate_impl_with_methods(trait_info);
            items.push(impl_with_methods);
        }
        self.output.items.extend(items);
    }
    fn generate_impl_with_methods(&self, trait_info: &TraitInfo) -> Item {
        let trait_name = &trait_info.trait_item.ident.to_string();
        let full_path = format!("{}::{}", trait_info.module_path.join("::"), trait_name);
        let trait_path: syn::Path = syn::parse_str(&full_path).unwrap();
        let import_path = self.get_proxy_path(&trait_info.module_path).join("::");
        let resource = match trait_name.strip_prefix("Guest") {
            Some("") => None,
            Some(name) => Some(name.to_string()),
            None => unreachable!(),
        };
        let stub: syn::Path = match (&self.mode, &resource) {
            (GenerateMode::Instrument, Some(resource)) => {
                let resource_path = format!("{}::{}", import_path, resource);
                syn::parse_str(&resource_path).unwrap()
            }
            (_, _) => parse_quote! { Stub },
        };
        // Collect all method signatures from the trait
        let mut methods = Vec::new();
        for item in &trait_info.trait_item.items {
            match item {
                TraitItem::Type(assoc_type) => {
                    let type_name = &assoc_type.ident;
                    let stub: syn::Path = match &self.mode {
                        GenerateMode::Instrument => {
                            let resource_path = format!("{}::{}", import_path, type_name);
                            syn::parse_str(&resource_path).unwrap()
                        }
                        _ => parse_quote! { Stub },
                    };
                    let impl_item = parse_quote! {
                        type #type_name = #stub;
                    };
                    methods.push(syn::ImplItem::Type(impl_item));
                }
                TraitItem::Fn(method) => {
                    if method.sig.ident.to_string().starts_with("_resource_") {
                        continue;
                    }
                    let module_path = &trait_info.module_path;
                    let mut sig = method.sig.clone();
                    let mut transformer = FullTypePath { module_path };
                    transformer.visit_signature_mut(&mut sig);
                    let stub_impl = match self.mode {
                        GenerateMode::Stubs => parse_quote! {
                            #[allow(unused_variables)]
                            #sig {
                                unimplemented!()
                            }
                        },
                        GenerateMode::Instrument => {
                            self.generate_instrument_func(module_path, &sig, &resource)
                        }
                        GenerateMode::Virtualize => todo!(),
                    };
                    methods.push(syn::ImplItem::Fn(stub_impl));
                }
                _ => (),
            }
        }
        parse_quote! {
            impl #trait_path for #stub {
                #(#methods)*
            }
        }
    }
    fn generate_instrument_func(
        &self,
        module_path: &[String],
        sig: &Signature,
        resource: &Option<String>,
    ) -> syn::ImplItemFn {
        if module_path.join("::") == "exports::proxy::conversion::conversion" {
            return parse_quote! { #[allow(unused_variables)] #sig { todo!() } };
        }
        let func_name = &sig.ident;
        let (is_method, args) = extract_arg_info(sig);
        let mut import_func = self.get_proxy_path(module_path);
        import_func.push(func_name.to_string());
        println!("{:?}", import_func);
        let import_sig = find_function(&self.ast.items, &import_func).unwrap();
        let (_, import_args) = extract_arg_info(import_sig);
        let call_args = args
            .iter()
            .zip(import_args.iter())
            .map(|(arg, import_arg)| -> syn::Expr {
                let ident = &arg.ident;
                if import_arg.is_borrowed {
                    parse_quote! { &#ident }
                } else {
                    parse_quote! { #ident }
                }
            });
        let func: syn::Expr = match (resource.is_some(), is_method.is_some()) {
            (true, true) => parse_quote! { self.#func_name },
            (true, false) => parse_quote! { Self::#func_name },
            (false, _) => syn::parse_str(&import_func.join("::")).unwrap(),
        };
        parse_quote! {
            #sig {
                #func(#(#call_args),*)
            }
        }
    }
    fn get_proxy_path(&self, src_path: &[String]) -> Vec<String> {
        assert!(matches!(self.mode, GenerateMode::Instrument));
        assert!(src_path.len() >= 3);
        let mut res = src_path.to_vec();
        let mut wrapped_idx = 0;
        if res[0] == "exports" {
            res.remove(0);
        } else {
            res.insert(0, "exports".to_string());
            wrapped_idx = 1;
        }
        match res[wrapped_idx].strip_prefix("wrapped_") {
            Some(name) => res[wrapped_idx] = name.to_string(),
            None => res[wrapped_idx] = "wrapped_".to_string() + &res[wrapped_idx],
        }
        res
    }
}

fn generate_preamble(_mode: &GenerateMode) -> File {
    syn::parse_str(
        r#"
    mod bindings;
    use bindings::*;
    struct Stub;
    bindings::export!(Stub with_types_in bindings);
    "#,
    )
    .unwrap()
}
fn find_function<'a>(items: &'a [Item], path: &[String]) -> Option<&'a Signature> {
    if path.is_empty() {
        return None;
    }
    if path.len() == 1 {
        for item in items {
            match item {
                Item::Fn(func) => {
                    if func.sig.ident == path[0] {
                        return Some(&func.sig);
                    }
                }
                Item::Impl(impl_block) => {
                    for impl_item in &impl_block.items {
                        if let syn::ImplItem::Fn(method) = impl_item
                            && method.sig.ident == path[0]
                        {
                            return Some(&method.sig);
                        }
                    }
                }
                Item::Trait(trait_block) => {
                    for trait_item in &trait_block.items {
                        if let syn::TraitItem::Fn(method) = trait_item
                            && method.sig.ident == path[0]
                        {
                            return Some(&method.sig);
                        }
                    }
                }
                _ => {}
            }
        }
        return None;
    }
    for item in items {
        if let Item::Mod(module) = item
            && module.ident == path[0]
        {
            if let Some((_, ref items)) = module.content {
                return find_function(items, &path[1..]);
            } else {
                return None;
            }
        }
    }
    None
}
fn find_all_traits(items: &[Item], current_path: Vec<String>) -> Vec<TraitInfo> {
    let mut traits = Vec::new();
    for item in items {
        match item {
            Item::Trait(trait_item) => {
                traits.push(TraitInfo {
                    module_path: current_path.clone(),
                    trait_item: trait_item.clone(),
                });
            }
            Item::Mod(module) => {
                if let Some((_, ref mod_items)) = module.content {
                    let mut new_path = current_path.clone();
                    let mod_name = module.ident.to_string();
                    if current_path.is_empty() && mod_name != "exports" {
                        continue;
                    }
                    new_path.push(mod_name);
                    traits.extend(find_all_traits(mod_items, new_path));
                }
            }
            _ => {}
        }
    }
    traits
}
const BUILTIN_TYPES: &[&str] = &[
    "Self", "Result", "Option", "Vec", "Box", "Rc", "Arc", "String", "str", "u8", "u16", "u32",
    "u64", "u128", "usize", "i8", "i16", "i32", "i64", "i128", "isize", "f32", "f64", "bool",
    "char", "_rt",
];
struct FullTypePath<'a> {
    module_path: &'a [String],
}
impl<'a> VisitMut for FullTypePath<'a> {
    fn visit_type_path_mut(&mut self, ty: &mut syn::TypePath) {
        if ty.qself.is_none() && !ty.path.segments.is_empty() && ty.path.leading_colon.is_none() {
            let ident = &ty.path.segments[0].ident.to_string();
            if BUILTIN_TYPES.contains(&ident.as_str()) {
                if ident == "_rt" {
                    assert!(ty.path.segments.len() == 2);
                    ty.path.segments = ty.path.segments.iter().skip(1).cloned().collect();
                }
                syn::visit_mut::visit_type_path_mut(self, ty);
                return;
            }
            let module_idents = self
                .module_path
                .iter()
                .map(|s| syn::parse_str::<syn::Ident>(s).unwrap());
            let original = &ty.path;
            *ty = parse_quote! {
                #(#module_idents)::*::#original
            };
        }
        syn::visit_mut::visit_type_path_mut(self, ty);
    }
}

struct ArgInfo {
    ident: Ident,
    is_borrowed: bool,
}
fn extract_arg_info(sig: &Signature) -> (Option<bool>, Vec<ArgInfo>) {
    let mut is_method = None;
    let mut arg_infos = Vec::new();
    for arg in sig.inputs.iter() {
        match arg {
            FnArg::Receiver(receiver) => {
                let is_borrowed = receiver.reference.is_some();
                is_method = Some(is_borrowed);
            }
            FnArg::Typed(pat_type) => {
                let ident = match &*pat_type.pat {
                    syn::Pat::Ident(ident) => ident.ident.clone(),
                    _ => unreachable!(),
                };
                let is_borrowed = matches!(&*pat_type.ty, Type::Reference(_));
                arg_infos.push(ArgInfo { ident, is_borrowed });
            }
        }
    }
    (is_method, arg_infos)
}
